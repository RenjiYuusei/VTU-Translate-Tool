name: Build Release APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        
    - name: Resolve keystore (repo files or secrets)
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ci/keystore

        if [ -f ci/keystore/keystore.properties ]; then
          echo "Using repository keystore at ci/keystore/keystore.properties"
        elif [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "Using keystore from GitHub Secrets"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > ci/keystore/Yuusei.jks

          if [ ! -s ci/keystore/Yuusei.jks ]; then
            echo "❌ Failed to create keystore from secrets"
            exit 1
          fi

          # Generate keystore.properties from secrets
          {
            echo "storeFile=ci/keystore/Yuusei.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > ci/keystore/keystore.properties

          echo "✅ Generated ci/keystore/keystore.properties from secrets"
        else
          echo "❌ No keystore provided. Add ci/keystore/keystore.properties to repo or set secrets."
          exit 1
        fi

        # Normalize file (strip UTF-8 BOM if present) to ensure grep works
        sed -i '1s/^\xEF\xBB\xBF//' ci/keystore/keystore.properties || true

        # Validate keystore.properties has required keys
        required=(storeFile storePassword keyAlias keyPassword)
        for k in "${required[@]}"; do
          if ! grep -q "^${k}=" ci/keystore/keystore.properties; then
            echo "❌ Missing '${k}' in ci/keystore/keystore.properties"
            exit 1
          fi
        done

        # Keystore details validated above; proceeding without writing step summary

    - name: Build release APK
      id: build_apk
      shell: bash
      continue-on-error: true
      run: |
        set -o pipefail
        ./gradlew --no-daemon assembleRelease --stacktrace
        STATUS=$?
        if [ $STATUS -eq 0 ]; then
          echo "- Status: ✅ Success"
        else
          echo "- Status: ❌ Failed"
        fi
        exit $STATUS

    - name: Get commit info
      id: commit
      run: |
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "commit_msg=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
        echo "build_date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
        
    - name: Rename APK file
      if: ${{ steps.build_apk.outcome == 'success' }}
      run: |
        mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/VTU-Translate-release-${{ steps.commit.outputs.short_sha }}.apk
        
    - name: Upload release APK
      if: ${{ steps.build_apk.outcome == 'success' }}
      uses: actions/upload-artifact@v4
      with:
        name: VTU-Translate-release-${{ steps.commit.outputs.build_date }}
        path: app/build/outputs/apk/release/VTU-Translate-release-${{ steps.commit.outputs.short_sha }}.apk
        retention-days: 90
        
