name: Build Release APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        
    - name: Resolve keystore (repo files or secrets)
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ci/keystore

        if [ -f ci/keystore/keystore.properties ]; then
          echo "Using repository keystore at ci/keystore/keystore.properties"
        elif [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "Using keystore from GitHub Secrets"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > ci/keystore/Yuusei.jks

          if [ ! -s ci/keystore/Yuusei.jks ]; then
            echo "❌ Failed to create keystore from secrets"
            exit 1
          fi

          # Generate keystore.properties from secrets
          {
            echo "storeFile=ci/keystore/Yuusei.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > ci/keystore/keystore.properties

          echo "✅ Generated ci/keystore/keystore.properties from secrets"
        else
          echo "❌ No keystore provided. Add ci/keystore/keystore.properties to repo or set secrets."
          exit 1
        fi

        # Validate keystore.properties has required keys
        required=(storeFile storePassword keyAlias keyPassword)
        for k in "${required[@]}"; do
          if ! grep -q "^${k}=" ci/keystore/keystore.properties; then
            echo "❌ Missing '${k}' in ci/keystore/keystore.properties" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
        done

        # Append keystore summary (masking secrets)
        echo "## 🔐 Keystore Configuration" >> "$GITHUB_STEP_SUMMARY"
        echo "- storeFile: $(grep '^storeFile=' ci/keystore/keystore.properties | cut -d'=' -f2-)" >> "$GITHUB_STEP_SUMMARY"
        echo "- keyAlias: $(grep '^keyAlias=' ci/keystore/keystore.properties | cut -d'=' -f2-)" >> "$GITHUB_STEP_SUMMARY"
        echo "- storePassword: ✅ (hidden)" >> "$GITHUB_STEP_SUMMARY"
        echo "- keyPassword: ✅ (hidden)" >> "$GITHUB_STEP_SUMMARY"

    - name: Build release APK
      id: build_apk
      shell: bash
      continue-on-error: true
      run: |
        set -o pipefail
        ./gradlew --no-daemon assembleRelease --stacktrace | tee build.log

    - name: Summarize build result
      if: always()
      shell: bash
      run: |
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "## 🧾 Build Result" >> "$GITHUB_STEP_SUMMARY"
        if grep -q "BUILD SUCCESSFUL" build.log; then
          echo "- Status: ✅ Success" >> "$GITHUB_STEP_SUMMARY"
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "- APK: $APK_PATH ($SIZE)" >> "$GITHUB_STEP_SUMMARY"
          fi
        else
          echo "- Status: ❌ Failed" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### 🔎 Error Snippet" >> "$GITHUB_STEP_SUMMARY"
          # Print last 200 lines to summary
          tail -n 200 build.log >> "$GITHUB_STEP_SUMMARY"
          # Also extract common Gradle error lines for quick view
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### ⚠️ Detected error lines" >> "$GITHUB_STEP_SUMMARY"
          (grep -E "(FAILURE: Build failed|ERROR|\[\w+\] error|Exception:)" build.log || true) | tail -n 50 >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi
      
    - name: Get commit info
      id: commit
      run: |
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "commit_msg=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
        echo "build_date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
        
    - name: Rename APK file
      run: |
        mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/VTU-Translate-release-${{ steps.commit.outputs.short_sha }}.apk
        
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: VTU-Translate-release-${{ steps.commit.outputs.build_date }}
        path: app/build/outputs/apk/release/VTU-Translate-release-${{ steps.commit.outputs.short_sha }}.apk
        retention-days: 90
        
    - name: Build summary
      if: always()
      run: |
        echo "## 🚀 Release Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ steps.commit.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Message**: ${{ steps.commit.outputs.commit_msg }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: ${{ steps.commit.outputs.build_date }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Download Release APK" >> $GITHUB_STEP_SUMMARY
        echo "The signed release APK is available in the **Artifacts** section." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Release APK**: VTU-Translate-release-${{ steps.commit.outputs.build_date }}" >> $GITHUB_STEP_SUMMARY
