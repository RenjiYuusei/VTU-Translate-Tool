name: Build Release APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Create local.properties
      run: |
        echo "sdk.dir=${ANDROID_SDK_ROOT:-$ANDROID_HOME}" > local.properties
        
    - name: Resolve keystore (repo files or secrets)
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ci/keystore

        if [ -f keystore.properties ]; then
          echo "Using repository keystore at keystore.properties"
        elif [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "Using keystore from GitHub Secrets"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > ci/keystore/Yuusei.jks

          if [ ! -s ci/keystore/Yuusei.jks ]; then
            echo "❌ Failed to create keystore from secrets"
            exit 1
          fi

          # Generate keystore.properties at repo root from secrets
          {
            echo "storeFile=ci/keystore/Yuusei.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > keystore.properties

          echo "✅ Generated keystore.properties at repository root from secrets"
        else
          echo "❌ No keystore provided. Commit keystore.properties and Yuusei.jks or set secrets."
          exit 1
        fi

        # Normalize file (strip UTF-8 BOM if present) to ensure grep works
        sed -i '1s/^\xEF\xBB\xBF//' keystore.properties || true

        # Validate keystore.properties has required keys
        required=(storeFile storePassword keyAlias keyPassword)
        for k in "${required[@]}"; do
          if ! grep -q "^${k}=" keystore.properties; then
            echo "❌ Missing '${k}' in keystore.properties"
            exit 1
          fi
        done

        # Read properties
        store_file=$(grep '^storeFile=' keystore.properties | sed 's/^storeFile=//')
        store_pass=$(grep '^storePassword=' keystore.properties | sed 's/^storePassword=//')
        alias_name=$(grep '^keyAlias=' keystore.properties | sed 's/^keyAlias=//')
        key_pass=$(grep '^keyPassword=' keystore.properties | sed 's/^keyPassword=//')

        # Ensure keystore file exists (resolve relative to repo root)
        if [ ! -f "$store_file" ]; then
          echo "❌ Keystore file not found at '$store_file' (from keystore.properties)"
          exit 1
        fi

        # Validate keystore, alias, and passwords using keytool (no secrets printed)
        echo "Validating keystore and alias from keystore.properties..."
        if ! keytool -list -keystore "$store_file" -storepass "$store_pass" >/dev/null 2>&1; then
          echo "❌ Keystore validation failed: store password may be incorrect or file is corrupted"
          exit 1
        fi
        if ! keytool -list -keystore "$store_file" -storepass "$store_pass" -alias "$alias_name" >/dev/null 2>&1; then
          echo "❌ Alias validation failed: alias '$alias_name' not found in keystore"
          echo "ℹ️ Available aliases:"
          keytool -list -keystore "$store_file" -storepass "$store_pass" | sed -n 's/^\s\+Alias name: \(.*\)$/- \1/p' || true
          exit 1
        fi
        # Try to access private key using key password (no change performed)
        if ! keytool -keypasswd -keystore "$store_file" -storepass "$store_pass" -alias "$alias_name" -keypass "$key_pass" -new "$key_pass" >/dev/null 2>&1; then
          echo "⚠️ Key password validation failed for alias '$alias_name' with provided keyPassword. Trying storePassword as key password..."
          if keytool -keypasswd -keystore "$store_file" -storepass "$store_pass" -alias "$alias_name" -keypass "$store_pass" -new "$store_pass" >/dev/null 2>&1; then
            echo "✅ Detected key password equals store password. Using store password for signing."
            # Update keystore.properties in workspace for this run so Gradle reads the correct key password
            sed -i "s/^keyPassword=.*/keyPassword=$store_pass/" keystore.properties
            key_pass="$store_pass"
          else
            echo "❌ Key password validation failed for alias '$alias_name'"
            exit 1
          fi
        else
          echo "✅ Keystore and key credentials look valid"
        fi

        # Keystore details validated above; proceeding without writing step summary

    - name: Build release APK
      id: build_apk
      shell: bash
      run: |
        set -o pipefail
        ./gradlew --no-daemon assembleRelease --stacktrace
        STATUS=$?
        if [ $STATUS -eq 0 ]; then
          echo "- Status: ✅ Success"
        else
          echo "- Status: ❌ Failed"
        fi
        exit $STATUS

    - name: Get commit info
      id: commit
      run: |
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
        
    - name: Rename APK file
      if: ${{ steps.build_apk.outcome == 'success' }}
      run: |
        mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/VTU-Translate-release-${{ steps.commit.outputs.short_sha }}.apk
        
    - name: Upload release APK
      if: ${{ steps.build_apk.outcome == 'success' }}
      uses: actions/upload-artifact@v4
      with:
        name: VTU-Translate-release-${{ steps.commit.outputs.build_date }}
        path: app/build/outputs/apk/release/VTU-Translate-release-${{ steps.commit.outputs.short_sha }}.apk
        retention-days: 90
        
