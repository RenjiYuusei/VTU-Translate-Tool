plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlinx-serialization'
}

android {
    namespace = 'com.vtu.translate'
    compileSdk = 34

    defaultConfig {
        applicationId "com.vtu.translate"
        minSdk = 24
        targetSdk = 34
        versionCode 9
        versionName "1.2.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
        
        // Reduce APK size by excluding unnecessary resources
        resConfigs "en", "vi"
        
        // Enable multidex for better performance
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // Preferred: repository-kept config in ci/keystore/keystore.properties (if present)
            def ciKeystorePropsFile = rootProject.file("ci/keystore/keystore.properties")
            if (ciKeystorePropsFile.exists()) {
                def ksProps = new Properties()
                ksProps.load(new FileInputStream(ciKeystorePropsFile))
                storeFile rootProject.file(ksProps['storeFile'])
                storePassword ksProps['storePassword']
                keyAlias ksProps['keyAlias']
                keyPassword ksProps['keyPassword']
            } else {
                // Next: root keystore.properties (local dev)
                def rootKeystorePropsFile = rootProject.file("keystore.properties")
                if (rootKeystorePropsFile.exists()) {
                    def ksProps = new Properties()
                    ksProps.load(new FileInputStream(rootKeystorePropsFile))
                    storeFile rootProject.file(ksProps['storeFile'])
                    storePassword ksProps['storePassword']
                    keyAlias ksProps['keyAlias']
                    keyPassword ksProps['keyPassword']
                } else {
                    // Finally: environment variables (e.g., from CI)
                    def env = System.getenv()
                    def ksFileEnv = env['KEYSTORE_FILE']
                    def ksPassEnv = env['KEYSTORE_PASSWORD']
                    def keyAliasEnv = env['KEY_ALIAS']
                    def keyPassEnv = env['KEY_PASSWORD']
                    if (ksFileEnv  ksPassEnv  keyAliasEnv  keyPassEnv) {
                        storeFile rootProject.file(ksFileEnv)
                        storePassword ksPassEnv
                        keyAlias keyAliasEnv
                        keyPassword keyPassEnv
                    } else {
                        throw new GradleException("Release signing is not configured. Provide ci/keystore/keystore.properties or keystore.properties, or set env vars.")
                    }
                }
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'r8-config.pro'
            signingConfig = signingConfigs.release
            // Optimize APK size
            crunchPngs false
            // Enable more aggressive optimizations
            zipAlignEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
            "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api"
        ]
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = '1.4.3'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += '/META-INF/DEPENDENCIES'
            excludes += '/META-INF/LICENSE'
            excludes += '/META-INF/LICENSE.txt'
            excludes += '/META-INF/NOTICE'
            excludes += '/META-INF/NOTICE.txt'
            excludes += '/META-INF/versions/**'
            excludes += '/kotlin/**'
            excludes += '/META-INF/com.android.tools/**'
            excludes += '/META-INF/proguard/**'
        }
        // Giảm dung lượng APK
        jniLibs {
            useLegacyPackaging = false
        }
    }
}

dependencies {
    // Multidex support
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Core Android
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'
    
    // Compose
    implementation platform('androidx.compose:compose-bom:2023.08.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.1.2'
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'androidx.navigation:navigation-compose:2.7.0'
    
    // ViewModel
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1'
    
    // Retrofit & OkHttp for API calls
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'
    
    // Kotlin Serialization
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'
    
    // Security for EncryptedSharedPreferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.03.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    
    // Debug
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}